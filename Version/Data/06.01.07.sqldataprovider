ALTER TABLE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module ADD
	LoadEvent int NOT NULL DEFAULT (1)
GO

ALTER PROCEDURE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_UpdateAggregatorModule
(
@AggregatorModuleId int,
@AggregatorTabId  int,
@TabModuleId int,
@Locale nvarchar(50),
@InsertBreak bit,
@LoadEvent int
)

as

DECLARE @MaxTabOrder int

if exists(select AggregatorModuleId From {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module WHERE AggregatorModuleId = @AggregatorModuleId)
	-- update
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module SET
			AggregatorTabId = @AggregatorTabId,
			TabModuleId = @TabModuleId,
			Locale = @Locale,
			InsertBreak = @InsertBreak,
			LoadEvent = @LoadEvent
		WHERE AggregatorModuleId = @AggregatorModuleId
	END
else
	-- add
	BEGIN
		-- grab tab order
		SET @MaxTabOrder = (SELECT IsNull(Max(ModuleOrder),0) FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module WHERE AggregatorTabId = @AggregatorTabId)

		INSERT  INTO {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module
			 (AggregatorTabId, ModuleOrder, TabModuleId, Locale, InsertBreak, LoadEvent)
		 VALUES (@AggregatorTabId, @MaxTabOrder+1, @TabModuleId, @Locale, @InsertBreak, @LoadEvent)
		-- grab new id
		SET @AggregatorModuleId = SCOPE_IDENTITY()
	END

-- ensure that the module orders for all contained modules are greater than the aggregator itself so rendering is correct sequence
DECLARE @ModuleId int
SET @ModuleId = (SELECT TOP 1 ModuleId FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Tab WHERE AggregatorTabId = @AggregatorTabId)

UPDATE {databaseOwner}{objectQualifier}TabModules 
Set ModuleOrder = 1 +  (SELECT MAX(ModuleOrder) FROM {databaseOwner}{objectQualifier}TabModules WHERE ModuleId = @ModuleId)
 WHERE TabModuleId = @TabModuleId

UPDATE {databaseOwner}{objectQualifier}TabModules 
Set PaneName = (SELECT TOP 1 PaneName FROM {databaseOwner}{objectQualifier}TabModules WHERE ModuleId = @ModuleId)
 WHERE TabModuleId = @TabModuleId

-- return id
SELECT @AggregatorModuleId
GO



ALTER PROCEDURE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_GetAggregatorModule
(
@AggregatorModuleId int
)

AS
SELECT AM.AggregatorModuleId, AM.AggregatorTabId, AM.TabModuleId, AM.ModuleOrder, AM.InsertBreak, AM.Locale, AM.LoadEvent, VM.ModuleId, VM.TabId, VM.ModuleTitle
	FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module AM 
		INNER JOIN {databaseOwner}{objectQualifier}vw_Modules VM ON VM.TabModuleId = AM.TabModuleId
	WHERE AM.AggregatorModuleId = @AggregatorModuleId

GO

ALTER PROCEDURE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_ListAggregatorModule
(
@AggregatorTabId  int
)
AS

SELECT AM.AggregatorModuleId, AM.AggregatorTabId, AM.TabModuleId, AM.ModuleOrder, AM.InsertBreak, AM.LoadEvent, AM.Locale, VM.ModuleId, VM.TabId, VM.ModuleTitle
	FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module AM 
		INNER JOIN {databaseOwner}{objectQualifier}vw_Modules VM ON VM.TabModuleId = AM.TabModuleId
	WHERE AM.AggregatorTabId = @AggregatorTabId AND VM.IsDeleted = 0
	ORDER BY AM.ModuleOrder ASC

GO
