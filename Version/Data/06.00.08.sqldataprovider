CREATE TABLE {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_Script](
	[PortalId] [int] NOT NULL,
	[ScriptName] [varchar](50) NOT NULL,
	[DontLoadScript] [bit] NOT NULL,
	[InternalScriptPath] [varchar](500) NOT NULL,
	[LoadHosted] [bit] NOT NULL,
	[HostedScriptPath] [varchar](500) NOT NULL,
 CONSTRAINT [PK_DNNStuff_Aggregator_Script] PRIMARY KEY CLUSTERED 
(
	[PortalId] ASC,
	[ScriptName] ASC
) 
) 
GO

IF EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DNNStuff_Aggregator_GetScript]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_GetScript];
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_GetScript]
(
	@PortalId int,
	@ScriptName varchar(50)
)
AS
BEGIN

	SELECT
		[PortalId],
		[ScriptName],
		[DontLoadScript],
		[InternalScriptPath],
		[LoadHosted],
		[HostedScriptPath]
	FROM {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_Script]
	WHERE
		([PortalId] = @PortalId) AND
		([ScriptName] = @ScriptName)

END
GO


IF EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DNNStuff_Aggregator_GetScripts]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_GetScripts];
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_GetScripts]
(@PortalId int)
AS
BEGIN

	SELECT
		[PortalId],
		[ScriptName],
		[DontLoadScript],
		[InternalScriptPath],
		[LoadHosted],
		[HostedScriptPath]
	FROM {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_Script]
	WHERE PortalId = @PortalId
END
GO

IF EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DNNStuff_Aggregator_UpdateScript]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_UpdateScript];
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_UpdateScript]
(
	@PortalId int,
	@ScriptName varchar(50),
	@DontLoadScript bit,
	@InternalScriptPath varchar(500),
	@LoadHosted bit,
	@HostedScriptPath varchar(500)
)
AS
BEGIN

	UPDATE {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_Script]
	SET
		[DontLoadScript] = @DontLoadScript,
		[InternalScriptPath] = @InternalScriptPath,
		[LoadHosted] = @LoadHosted,
		[HostedScriptPath] = @HostedScriptPath
	WHERE
		[PortalId] = @PortalId
	AND	[ScriptName] = @ScriptName




END
GO


IF EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DNNStuff_Aggregator_AddScript]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_AddScript];
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_AddScript]
(
	@PortalId int,
	@ScriptName varchar(50),
	@DontLoadScript bit,
	@InternalScriptPath varchar(500),
	@LoadHosted bit,
	@HostedScriptPath varchar(500)
)
AS
BEGIN


	INSERT
	INTO {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_Script]
	(
		[PortalId],
		[ScriptName],
		[DontLoadScript],
		[InternalScriptPath],
		[LoadHosted],
		[HostedScriptPath]
	)
	VALUES
	(
		@PortalId,
		@ScriptName,
		@DontLoadScript,
		@InternalScriptPath,
		@LoadHosted,
		@HostedScriptPath
	)


END
GO


IF EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DNNStuff_Aggregator_DeleteScript]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_DeleteScript];
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_DeleteScript]
(
	@PortalId int,
	@ScriptName varchar(50)
)
AS
BEGIN

	DELETE
	FROM {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_Script]
	WHERE
		[PortalId] = @PortalId AND
		[ScriptName] = @ScriptName
END
GO

IF EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DNNStuff_Aggregator_GetAggregatorModule]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_GetAggregatorModule];
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_GetAggregatorModule]
(
@AggregatorModuleId int
)

AS
SELECT AM.AggregatorModuleId, AM.AggregatorTabId, AM.TabModuleId, AM.ModuleOrder, AM.InsertBreak, AM.Locale, M.ModuleId, TM.TabId, '' AS ModuleTitle
	FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module AM 
		INNER JOIN {databaseOwner}{objectQualifier}TabModules TM ON TM.TabModuleId = AM.TabModuleId
		INNER JOIN {databaseOwner}{objectQualifier}Modules M ON M.ModuleId = TM.ModuleId
	WHERE AM.AggregatorModuleId = @AggregatorModuleId
GO
