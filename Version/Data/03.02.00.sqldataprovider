-- MODULE         : DNNSTUFF - AGGREGATOR - DNN3
-- VERSION        : 03.02.00
-- 01/MAR/2006    : 

----------------------------------------------------------------------------------------------
-- DROP ALL PROCS
----------------------------------------------------------------------------------------------
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNStuff_Aggregator_DeleteAggregator]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_DeleteAggregator]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNStuff_Aggregator_DeleteAggregatorModule]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_DeleteAggregatorModule]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNStuff_Aggregator_GetAggregator]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_GetAggregator]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNStuff_Aggregator_GetAggregatorModule]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_GetAggregatorModule]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNStuff_Aggregator_GetPageModules]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_GetPageModules]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNStuff_Aggregator_GetTabModules]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_GetTabModules]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNStuff_Aggregator_UpdateAggregator]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_UpdateAggregator]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNStuff_Aggregator_UpdateAggregatorModule]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_UpdateAggregatorModule]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNStuff_Aggregator_UpdateModuleOrder]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_UpdateModuleOrder]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNStuff_Aggregator_UpdateTabOrder]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNStuff_Aggregator_UpdateTabOrder]
GO

----------------------------------------------------------------------------------------------
-- CREATE NEW TABLE AGGREGATOR_MODULE
----------------------------------------------------------------------------------------------
CREATE TABLE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module (
	[AggregatorModuleId] [int] IDENTITY (1, 1) NOT NULL ,
	[AggregatorId] [int] NOT NULL ,
	[TabModuleId] [int] NOT NULL ,
	[ModuleOrder] [int] NOT NULL CONSTRAINT [DF_{objectQualifier}DNNStuff_Aggregator_Module_ModuleOrder] DEFAULT (0),
	[InsertBreak] [bit] NOT NULL CONSTRAINT [DF_{objectQualifier}DNNStuff_Aggregator_Module_InsertBreak] DEFAULT (1),
	[Locale] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL ,
	[HorizontalAlign] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [DF_{objectQualifier}DNNStuff_Aggregator_Module_HorizontalAlign] DEFAULT (N'left'),
	CONSTRAINT [PK_{objectQualifier}DNNStuff_Aggregator_Module] PRIMARY KEY  CLUSTERED 
	(
		[AggregatorModuleId]
	)   
) 
GO

----------------------------------------------------------------------------------------------
-- MOVE MODULES OVER TO AGGREGATOR_MODULE
----------------------------------------------------------------------------------------------
INSERT INTO {databaseOwner}{objectQualifier}DNNSTUFF_AGGREGATOR_MODULE
(AggregatorId,TabModuleId,ModuleOrder,InsertBreak,Locale,HorizontalAlign)

SELECT AggregatorId,TabModuleId,TabOrder, 1, 'All','Left' FROM {databaseOwner}{objectQualifier}DNNSTUFF_AGGREGATOR_AGGREGATOR
GO

----------------------------------------------------------------------------------------------
-- UPDATE THE CAPTION IN AGGREGATOR_AGGREGATOR
----------------------------------------------------------------------------------------------
UPDATE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator
SET Caption = VM.ModuleTitle
FROM {databaseOwner}{objectQualifier}vw_Modules VM 
INNER JOIN {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator A ON A.TabModuleId = VM.TabModuleId

GO

----------------------------------------------------------------------------------------------
-- REMOVE COLUMNS FROM AGGREGATOR
----------------------------------------------------------------------------------------------
ALTER TABLE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator
	ADD Locale nvarchar(50) NOT NULL DEFAULT 'All'
GO

ALTER TABLE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator
	DROP COLUMN TabModuleId
GO

----------------------------------------------------------------------------------------------
-- CREATE ALL PROCS
----------------------------------------------------------------------------------------------
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO


CREATE procedure {databaseOwner}{objectQualifier}DNNStuff_Aggregator_DeleteAggregator

@AggregatorId  int

as

declare @CurrentTabOrder int
declare @ModuleId int

-- grab current taborder, module
select @ModuleId=ModuleId, @CurrentTabOrder=TabOrder from {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator where  AggregatorId = @AggregatorId

-- remove it
delete from {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator
where  AggregatorId = @AggregatorId

delete from {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module
where  AggregatorId = @AggregatorId

-- reshuffle tab order
update {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator set TabOrder = TabOrder-1 WHERE ModuleId = @ModuleId and TabOrder > @CurrentTabOrder

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO


CREATE procedure {databaseOwner}{objectQualifier}DNNStuff_Aggregator_DeleteAggregatorModule

@AggregatorModuleId  int

as

declare @CurrentModuleOrder int
declare @AggregatorId int

-- grab current moduleorder, module
select @AggregatorId=AggregatorId, @CurrentModuleOrder=ModuleOrder from {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module where  AggregatorModuleId = @AggregatorModuleId

-- remove it

delete from {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module
where  AggregatorModuleId = @AggregatorModuleId

-- reshuffle module order
update {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module set ModuleOrder = ModuleOrder-1 WHERE AggregatorId = @AggregatorId and ModuleOrder > @CurrentModuleOrder

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE procedure {databaseOwner}{objectQualifier}DNNStuff_Aggregator_GetAggregator

@ModuleId  int

as

-- First, clean up any modules deleted fom the DNN side
DELETE FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module WHERE TabModuleId IN (SELECT TabModuleId FROM {databaseOwner}{objectQualifier}Modules M INNER JOIN {databaseOwner}{objectQualifier}TabModules TM ON M.ModuleId = TM.ModuleId WHERE M.IsDeleted = 1)

-- Second, make sure that the module orders for all contained modules are greater than the aggregator itself so rendering is correct sequence
UPDATE {databaseOwner}{objectQualifier}TabModules Set ModuleOrder = 1 +  (SELECT MAX(ModuleOrder) FROM {databaseOwner}{objectQualifier}TabModules WHERE ModuleId = @ModuleId)
	WHERE TabModuleId IN (SELECT TabModuleId FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module INNER JOIN {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator 
	ON {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module.AggregatorId = {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator.AggregatorId
	WHERE ModuleId = @ModuleId)

UPDATE {databaseOwner}{objectQualifier}TabModules Set PaneName = (SELECT TOP 1 PaneName FROM {databaseOwner}{objectQualifier}TabModules WHERE ModuleId = @ModuleId)
	WHERE TabModuleId IN (SELECT TabModuleId FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module INNER JOIN {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator 
	ON {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module.AggregatorId = {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator.AggregatorId
	WHERE ModuleId = @ModuleId)

-- Now, select remaining modules
SELECT A.AggregatorId, A.TabOrder, A.Caption, A.Locale
	FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator A
	WHERE A.ModuleId = @ModuleId
	ORDER BY A.TabOrder ASC

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO


CREATE procedure {databaseOwner}{objectQualifier}DNNStuff_Aggregator_GetAggregatorModule

@AggregatorId  int

as

-- First, clean up any modules deleted fom the DNN side
DELETE FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module WHERE TabModuleId IN (SELECT TabModuleId FROM {databaseOwner}{objectQualifier}Modules M INNER JOIN {databaseOwner}{objectQualifier}TabModules TM ON M.ModuleId = TM.ModuleId WHERE M.IsDeleted = 1)

-- Now, select remaining modules

SELECT AM.AggregatorModuleId, AM.AggregatorId, AM.TabModuleId, AM.ModuleOrder, AM.InsertBreak, AM.Locale, AM.HorizontalAlign, M.ModuleId, TM.TabId, '' AS ModuleTitle
	FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module AM 
		INNER JOIN {databaseOwner}{objectQualifier}TabModules TM ON TM.TabModuleId = AM.TabModuleId
		INNER JOIN {databaseOwner}{objectQualifier}Modules M ON M.ModuleId = TM.ModuleId
	WHERE AM.AggregatorId = @AggregatorId
	ORDER BY AM.ModuleOrder ASC
GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO


/* Get a list of the modules on this page that will be aggregated */

CREATE procedure {databaseOwner}{objectQualifier}DNNStuff_Aggregator_GetPageModules

@TabId  int

as

-- select all modules that are aggregated on this page
-- we need to hide these before we render anything else
SELECT AM.TabModuleId, TM.ModuleId
	FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module AM
		INNER JOIN {databaseOwner}{objectQualifier}TabModules TM ON TM.TabModuleId = AM.TabModuleId
	WHERE 
	TM.ModuleId IN (SELECT ModuleId FROM {databaseOwner}{objectQualifier}TabModules WHERE TabId = @TabId)

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO



-- 07/01/2005 - v3.0.3 - Added support for nesting
-- 10/02/2006 - v3.2.0 - Removed condition that module must exist on same tab

CREATE PROCEDURE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_GetTabModules
(
@TabId int,
@ModuleId int,
@ShowAllModules bit,
@AggregatorModuleId int,
@PortalId int
)
AS

-- Delete any modules that have been orphaned by a user delete of an aggregator
DELETE FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator WHERE ModuleId NOT IN (SELECT ModuleId FROM {databaseOwner}{objectQualifier}Modules WHERE IsDeleted = 0)

-- Select currently selected module
SELECT T.TABNAME,T.TABORDER,TM.TabModuleId, T.TabName + '>' + '' FullModuleTitle FROM {databaseOwner}{objectQualifier}TabModules TM

INNER JOIN {databaseOwner}{objectQualifier}Modules M ON TM.ModuleId = M.ModuleId
INNER JOIN {databaseOwner}{objectQualifier}Tabs T ON T.TabId = TM.TabId
INNER JOIN {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module AM ON AM.TabModuleId = TM.TabModuleId
WHERE AM.AggregatorModuleId = @AggregatorModuleId

UNION

-- Now, select remaining
SELECT T.TABNAME,T.TABORDER,TM.TabModuleId, T.TabName + '>' + '' FullModuleTitle FROM {databaseOwner}{objectQualifier}TabModules TM

INNER JOIN {databaseOwner}{objectQualifier}Modules M ON TM.ModuleId = M.ModuleId
INNER JOIN {databaseOwner}{objectQualifier}Tabs T ON T.TabId = TM.TabId
INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions MD ON MD.ModuleDefID = M.ModuleDefID
INNER JOIN {databaseOwner}{objectQualifier}DesktopModules DM ON MD.DesktopModuleID = DM.DesktopModuleID
WHERE
	-- this tab
	(TM.TabId = @TabId OR @ShowAllModules = 1)
		AND
	-- not this module
	TM.ModuleId <> @ModuleId
		AND
	-- module not deleted
	M.IsDeleted = 0
		AND
	-- tab not deleted and visible
	T.IsDeleted = 0 AND T.IsVisible = 1
		AND

	-- not already aggregated in this tab
	TM.TabModuleId NOT IN (SELECT AM1.TabModuleId FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator A1 
		INNER JOIN {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module AM1 ON A1.AggregatorId = AM1.AggregatorId
		INNER JOIN {databaseOwner}{objectQualifier}TabModules TM1 ON AM1.TabModuleId = TM1.TabModuleId 
		INNER JOIN {databaseOwner}{objectQualifier}Modules M1 ON TM1.ModuleId = M1.ModuleId 
		WHERE TM1.TabId = @TabId OR A1.ModuleId = @ModuleId)
		AND

	-- not an aggregator itself
	M.ModuleId NOT IN (SELECT A2.ModuleId FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator A2
		INNER JOIN {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module AM2 ON A2.AggregatorId = AM2.AggregatorId
		INNER JOIN {databaseOwner}{objectQualifier}TabModules TM2 ON AM2.TabModuleId = TM2.TabModuleId
		WHERE TM2.ModuleId = @moduleid
		)
		AND
	-- same portal
	T.PortalId = @PortalId
		AND
	-- not an admin module
	DM.IsAdmin = 0

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO





CREATE procedure {databaseOwner}{objectQualifier}DNNStuff_Aggregator_UpdateAggregator
(
@AggregatorId int output,
@ModuleId int,
@Caption nvarchar(200),
@Locale nvarchar(50)
)

as

DECLARE @MaxTabOrder int

if exists(select AggregatorId From {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator WHERE AggregatorId = @AggregatorId)
	-- update
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator SET
			ModuleId = @ModuleId,
			Caption = @Caption,
			Locale = @Locale
		WHERE AggregatorId = @AggregatorId
		
		SELECT @AggregatorId
	END
else
	-- add
	BEGIN
		-- grab tab order
		SET @MaxTabOrder = (SELECT IsNull(Max(TabOrder),0) FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator WHERE ModuleId = @ModuleId)

		INSERT  INTO {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator
			 (ModuleId, TabOrder, Caption, Locale)
		 VALUES (@ModuleId, @MaxTabOrder+1, @Caption, @Locale)
		-- grab new id
		SELECT @@IDENTITY
	END
GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO


CREATE procedure {databaseOwner}{objectQualifier}DNNStuff_Aggregator_UpdateAggregatorModule
(
@AggregatorModuleId int OUTPUT,
@AggregatorId  int,
@TabModuleId int,
@Locale nvarchar(50),
@InsertBreak bit,
@HorizontalAlign nvarchar(10)
)

as

DECLARE @MaxTabOrder int

if exists(select AggregatorModuleId From {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module WHERE AggregatorModuleId = @AggregatorModuleId)
	-- update
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module SET
			AggregatorId = @AggregatorId,
			TabModuleId = @TabModuleId,
			Locale = @Locale,
			InsertBreak = @InsertBreak,
			HorizontalAlign = @HorizontalAlign
		WHERE AggregatorModuleId = @AggregatorModuleId
	END
else
	-- add
	BEGIN
		-- grab tab order
		SET @MaxTabOrder = (SELECT IsNull(Max(ModuleOrder),0) FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module WHERE AggregatorId = @AggregatorId)

		INSERT  INTO {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module
			 (AggregatorId, ModuleOrder, TabModuleId, Locale, InsertBreak, HorizontalAlign)
		 VALUES (@AggregatorId, @MaxTabOrder+1, @TabModuleId, @Locale, @InsertBreak, @HorizontalAlign)
		-- grab new id
		SET @AggregatorModuleId = @@IDENTITY
	END

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO


CREATE procedure {databaseOwner}{objectQualifier}DNNStuff_Aggregator_UpdateModuleOrder

@AggregatorModuleId  int,
@Increment int

as

declare @CurrentModuleOrder int
declare @AggregatorId int

-- grab current moduleorder, aggregator
select @AggregatorId=AggregatorId, @CurrentModuleOrder=ModuleOrder from {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module where  AggregatorModuleId = @AggregatorModuleId

-- update the tab we're replacing
update {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module
set    ModuleOrder = @CurrentModuleOrder
where  AggregatorId = @AggregatorId and ModuleOrder = @CurrentModuleOrder+@Increment

-- update the tab we are setting
update {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module
set    ModuleOrder = ModuleOrder + @Increment
where  AggregatorModuleId = @AggregatorModuleId

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO






CREATE procedure {databaseOwner}{objectQualifier}DNNStuff_Aggregator_UpdateTabOrder

@AggregatorId  int,
@Increment int

as

declare @CurrentTabOrder int
declare @ModuleId int

-- grab current taborder, module
select @ModuleId=ModuleId, @CurrentTabOrder=TabOrder from {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator where  AggregatorId = @AggregatorId

-- update the tab we're replacing
update {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator
set    TabOrder = @CurrentTabOrder
where  ModuleId = @ModuleId and TabOrder = @CurrentTabOrder+@Increment

-- update the tab we are setting
update {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Aggregator
set    TabOrder = TabOrder + @Increment
where  AggregatorId = @AggregatorId




GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


----------------------------------------------------------------------------------------------
-- DONE
----------------------------------------------------------------------------------------------
