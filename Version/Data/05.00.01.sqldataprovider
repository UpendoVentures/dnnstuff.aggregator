-- MODULE         : DNNSTUFF - AGGREGATOR - DNN4
-- VERSION        : 05.00.01
-- 24/APR/2008    : 
-- Fixes include  : 


---------------------------------------------------------------------------------------------
-- UPDATE TABLE STRUCTURES
---------------------------------------------------------------------------------------------
EXEC SP_RENAME '{databaseOwner}{objectQualifier}DNNStuff_Aggregator_Target.AggregatorTabModuleId', 'TargetModuleId', 'COLUMN'
GO

UPDATE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Target SET TargetModuleId = (SELECT ModuleId FROM {databaseOwner}{objectQualifier}TABMODULES WHERE TABMODULEID = TargetModuleId)
GO

---------------------------------------------------------------------------------------------
-- ALTER STORED PROCEDURES
---------------------------------------------------------------------------------------------
ALTER PROCEDURE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_GetAvailableTargets
(
@TabId int,
@ModuleId int,
@TargetModuleId int
)
AS

SELECT TM.ModuleId, '' AS FullModuleTitle
FROM
	 	{databaseOwner}{objectQualifier}Modules M
INNER JOIN 	{databaseOwner}{objectQualifier}TabModules TM ON M.MODULEID = TM.MODULEID
INNER JOIN	{databaseOwner}{objectQualifier}ModuleDefinitions MD ON M.MODULEDEFID = MD.MODULEDEFID
LEFT JOIN 	{databaseOwner}{objectQualifier}DNNStuff_Aggregator_Target [AT] ON [AT].TargetModuleId = TM.ModuleID
WHERE
	-- on this tab
 		(TM.TABID = @TabId)
	-- only aggregators
	AND	MD.FriendlyName = 'DNNStuff - Aggregator'
	-- not this aggregator module
	AND	M.ModuleID <> @ModuleId
	-- nothing already targeted, except the current selection
	AND	[AT].TargetModuleId IS NULL OR [AT].TargetModuleId = @TargetModuleId
GO



ALTER PROCEDURE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_GetTargets
(
@ModuleId  int
)
AS

SELECT A.AggregatorTargetId, A.TargetModuleId, '' AS TargetTitle
	FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Target A
INNER JOIN {databaseOwner}{objectQualifier}Modules M ON M.ModuleId = A.TargetModuleId
	WHERE A.ModuleId = @ModuleId

GO



ALTER PROCEDURE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_UpdateTarget
(
@AggregatorTargetId int output,
@ModuleId int,
@TargetModuleId int
)

as

if exists(select AggregatorTargetId From {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Target WHERE AggregatorTargetId = @AggregatorTargetId)
	-- update
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Target SET
			ModuleId = @ModuleId,
			TargetModuleId = @TargetModuleId
		WHERE AggregatorTargetId = @AggregatorTargetId
		
		SELECT @AggregatorTargetId
	END
else
	-- add
	BEGIN

		INSERT  INTO {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Target
			 (ModuleId, TargetModuleId)
		 VALUES (@ModuleId, @TargetModuleId)
		-- grab new id
		SELECT @@IDENTITY
	END

GO

ALTER PROCEDURE {databaseOwner}{objectQualifier}DNNStuff_Aggregator_ListAggregator

@ModuleId  int

as

-- Clean up any tabs belonging to modules that were deleted
DELETE FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Tab
WHERE ModuleId NOT IN (SELECT M.ModuleId FROM {databaseOwner}{objectQualifier}Modules M WHERE M.IsDeleted = 0)
-- Same for targets - targets belonging to a deleted aggregator
DELETE FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Target
WHERE ModuleId NOT IN (SELECT M.ModuleId FROM {databaseOwner}{objectQualifier}Modules M WHERE M.IsDeleted = 0)
-- Same for targets - targets of a deleted aggregator
DELETE FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Target
WHERE TargetModuleId NOT IN (SELECT M.ModuleId FROM {databaseOwner}{objectQualifier}Modules M WHERE M.IsDeleted = 0)


-- Now, clean up any modules orphaned by those deleted tabs
DELETE FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module 
WHERE AggregatorTabId NOT IN (SELECT AggregatorTabId FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Tab)

-- Second, make sure that the module orders for all contained modules are greater than the aggregator itself so rendering is correct sequence
UPDATE {databaseOwner}{objectQualifier}TabModules Set ModuleOrder = 1 +  (SELECT MAX(ModuleOrder) FROM {databaseOwner}{objectQualifier}TabModules WHERE ModuleId = @ModuleId)
	WHERE TabModuleId IN (SELECT TabModuleId FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module INNER JOIN {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Tab 
	ON {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module.AggregatorTabId = {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Tab.AggregatorTabId
	WHERE ModuleId = @ModuleId)

UPDATE {databaseOwner}{objectQualifier}TabModules Set PaneName = (SELECT TOP 1 PaneName FROM {databaseOwner}{objectQualifier}TabModules WHERE ModuleId = @ModuleId)
	WHERE TabModuleId IN (SELECT TabModuleId FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module INNER JOIN {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Tab 
	ON {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Module.AggregatorTabId = {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Tab.AggregatorTabId
	WHERE ModuleId = @ModuleId)

-- Now, select remaining modules
SELECT T.AggregatorTabId, T.TabOrder, T.Caption, T.Locale, T.HtmlText
	FROM {databaseOwner}{objectQualifier}DNNStuff_Aggregator_Tab T
	WHERE T.ModuleId = @ModuleId
	ORDER BY T.TabOrder ASC

GO

----------------------------------------------------------------------------------------------
-- DONE
----------------------------------------------------------------------------------------------
